{"ast":null,"code":"import { Bezier } from \"./bezier.js\";\n\n// math-inlining.\nconst {\n  abs,\n  cos,\n  sin,\n  acos,\n  atan2,\n  sqrt,\n  pow\n} = Math;\n\n// cube root function yielding real roots\nfunction crt(v) {\n  return v < 0 ? -pow(-v, 1 / 3) : pow(v, 1 / 3);\n}\n\n// trig constants\nconst pi = Math.PI,\n  tau = 2 * pi,\n  quart = pi / 2,\n  // float precision significant decimal\n  epsilon = 0.000001,\n  // extremas used in bbox calculation and similar algorithms\n  nMax = Number.MAX_SAFE_INTEGER || 9007199254740991,\n  nMin = Number.MIN_SAFE_INTEGER || -9007199254740991,\n  // a zero coordinate, which is surprisingly useful\n  ZERO = {\n    x: 0,\n    y: 0,\n    z: 0\n  };\n\n// Bezier utility functions\nconst utils = {\n  // Legendre-Gauss abscissae with n=24 (x_i values, defined at i=n as the roots of the nth order Legendre polynomial Pn(x))\n  Tvalues: [-0.0640568928626056260850430826247450385909, 0.0640568928626056260850430826247450385909, -0.1911188674736163091586398207570696318404, 0.1911188674736163091586398207570696318404, -0.3150426796961633743867932913198102407864, 0.3150426796961633743867932913198102407864, -0.4337935076260451384870842319133497124524, 0.4337935076260451384870842319133497124524, -0.5454214713888395356583756172183723700107, 0.5454214713888395356583756172183723700107, -0.6480936519369755692524957869107476266696, 0.6480936519369755692524957869107476266696, -0.7401241915785543642438281030999784255232, 0.7401241915785543642438281030999784255232, -0.8200019859739029219539498726697452080761, 0.8200019859739029219539498726697452080761, -0.8864155270044010342131543419821967550873, 0.8864155270044010342131543419821967550873, -0.9382745520027327585236490017087214496548, 0.9382745520027327585236490017087214496548, -0.9747285559713094981983919930081690617411, 0.9747285559713094981983919930081690617411, -0.9951872199970213601799974097007368118745, 0.9951872199970213601799974097007368118745],\n  // Legendre-Gauss weights with n=24 (w_i values, defined by a function linked to in the Bezier primer article)\n  Cvalues: [0.1279381953467521569740561652246953718517, 0.1279381953467521569740561652246953718517, 0.1258374563468282961213753825111836887264, 0.1258374563468282961213753825111836887264, 0.121670472927803391204463153476262425607, 0.121670472927803391204463153476262425607, 0.1155056680537256013533444839067835598622, 0.1155056680537256013533444839067835598622, 0.1074442701159656347825773424466062227946, 0.1074442701159656347825773424466062227946, 0.0976186521041138882698806644642471544279, 0.0976186521041138882698806644642471544279, 0.086190161531953275917185202983742667185, 0.086190161531953275917185202983742667185, 0.0733464814110803057340336152531165181193, 0.0733464814110803057340336152531165181193, 0.0592985849154367807463677585001085845412, 0.0592985849154367807463677585001085845412, 0.0442774388174198061686027482113382288593, 0.0442774388174198061686027482113382288593, 0.0285313886289336631813078159518782864491, 0.0285313886289336631813078159518782864491, 0.0123412297999871995468056670700372915759, 0.0123412297999871995468056670700372915759],\n  arcfn: function (t, derivativeFn) {\n    const d = derivativeFn(t);\n    let l = d.x * d.x + d.y * d.y;\n    if (typeof d.z !== \"undefined\") {\n      l += d.z * d.z;\n    }\n    return sqrt(l);\n  },\n  compute: function (t, points, _3d) {\n    // shortcuts\n    if (t === 0) {\n      points[0].t = 0;\n      return points[0];\n    }\n    const order = points.length - 1;\n    if (t === 1) {\n      points[order].t = 1;\n      return points[order];\n    }\n    const mt = 1 - t;\n    let p = points;\n\n    // constant?\n    if (order === 0) {\n      points[0].t = t;\n      return points[0];\n    }\n\n    // linear?\n    if (order === 1) {\n      const ret = {\n        x: mt * p[0].x + t * p[1].x,\n        y: mt * p[0].y + t * p[1].y,\n        t: t\n      };\n      if (_3d) {\n        ret.z = mt * p[0].z + t * p[1].z;\n      }\n      return ret;\n    }\n\n    // quadratic/cubic curve?\n    if (order < 4) {\n      let mt2 = mt * mt,\n        t2 = t * t,\n        a,\n        b,\n        c,\n        d = 0;\n      if (order === 2) {\n        p = [p[0], p[1], p[2], ZERO];\n        a = mt2;\n        b = mt * t * 2;\n        c = t2;\n      } else if (order === 3) {\n        a = mt2 * mt;\n        b = mt2 * t * 3;\n        c = mt * t2 * 3;\n        d = t * t2;\n      }\n      const ret = {\n        x: a * p[0].x + b * p[1].x + c * p[2].x + d * p[3].x,\n        y: a * p[0].y + b * p[1].y + c * p[2].y + d * p[3].y,\n        t: t\n      };\n      if (_3d) {\n        ret.z = a * p[0].z + b * p[1].z + c * p[2].z + d * p[3].z;\n      }\n      return ret;\n    }\n\n    // higher order curves: use de Casteljau's computation\n    const dCpts = JSON.parse(JSON.stringify(points));\n    while (dCpts.length > 1) {\n      for (let i = 0; i < dCpts.length - 1; i++) {\n        dCpts[i] = {\n          x: dCpts[i].x + (dCpts[i + 1].x - dCpts[i].x) * t,\n          y: dCpts[i].y + (dCpts[i + 1].y - dCpts[i].y) * t\n        };\n        if (typeof dCpts[i].z !== \"undefined\") {\n          dCpts[i].z = dCpts[i].z + (dCpts[i + 1].z - dCpts[i].z) * t;\n        }\n      }\n      dCpts.splice(dCpts.length - 1, 1);\n    }\n    dCpts[0].t = t;\n    return dCpts[0];\n  },\n  computeWithRatios: function (t, points, ratios, _3d) {\n    const mt = 1 - t,\n      r = ratios,\n      p = points;\n    let f1 = r[0],\n      f2 = r[1],\n      f3 = r[2],\n      f4 = r[3],\n      d;\n\n    // spec for linear\n    f1 *= mt;\n    f2 *= t;\n    if (p.length === 2) {\n      d = f1 + f2;\n      return {\n        x: (f1 * p[0].x + f2 * p[1].x) / d,\n        y: (f1 * p[0].y + f2 * p[1].y) / d,\n        z: !_3d ? false : (f1 * p[0].z + f2 * p[1].z) / d,\n        t: t\n      };\n    }\n\n    // upgrade to quadratic\n    f1 *= mt;\n    f2 *= 2 * mt;\n    f3 *= t * t;\n    if (p.length === 3) {\n      d = f1 + f2 + f3;\n      return {\n        x: (f1 * p[0].x + f2 * p[1].x + f3 * p[2].x) / d,\n        y: (f1 * p[0].y + f2 * p[1].y + f3 * p[2].y) / d,\n        z: !_3d ? false : (f1 * p[0].z + f2 * p[1].z + f3 * p[2].z) / d,\n        t: t\n      };\n    }\n\n    // upgrade to cubic\n    f1 *= mt;\n    f2 *= 1.5 * mt;\n    f3 *= 3 * mt;\n    f4 *= t * t * t;\n    if (p.length === 4) {\n      d = f1 + f2 + f3 + f4;\n      return {\n        x: (f1 * p[0].x + f2 * p[1].x + f3 * p[2].x + f4 * p[3].x) / d,\n        y: (f1 * p[0].y + f2 * p[1].y + f3 * p[2].y + f4 * p[3].y) / d,\n        z: !_3d ? false : (f1 * p[0].z + f2 * p[1].z + f3 * p[2].z + f4 * p[3].z) / d,\n        t: t\n      };\n    }\n  },\n  derive: function (points, _3d) {\n    const dpoints = [];\n    for (let p = points, d = p.length, c = d - 1; d > 1; d--, c--) {\n      const list = [];\n      for (let j = 0, dpt; j < c; j++) {\n        dpt = {\n          x: c * (p[j + 1].x - p[j].x),\n          y: c * (p[j + 1].y - p[j].y)\n        };\n        if (_3d) {\n          dpt.z = c * (p[j + 1].z - p[j].z);\n        }\n        list.push(dpt);\n      }\n      dpoints.push(list);\n      p = list;\n    }\n    return dpoints;\n  },\n  between: function (v, m, M) {\n    return m <= v && v <= M || utils.approximately(v, m) || utils.approximately(v, M);\n  },\n  approximately: function (a, b, precision) {\n    return abs(a - b) <= (precision || epsilon);\n  },\n  length: function (derivativeFn) {\n    const z = 0.5,\n      len = utils.Tvalues.length;\n    let sum = 0;\n    for (let i = 0, t; i < len; i++) {\n      t = z * utils.Tvalues[i] + z;\n      sum += utils.Cvalues[i] * utils.arcfn(t, derivativeFn);\n    }\n    return z * sum;\n  },\n  map: function (v, ds, de, ts, te) {\n    const d1 = de - ds,\n      d2 = te - ts,\n      v2 = v - ds,\n      r = v2 / d1;\n    return ts + d2 * r;\n  },\n  lerp: function (r, v1, v2) {\n    const ret = {\n      x: v1.x + r * (v2.x - v1.x),\n      y: v1.y + r * (v2.y - v1.y)\n    };\n    if (v1.z !== undefined && v2.z !== undefined) {\n      ret.z = v1.z + r * (v2.z - v1.z);\n    }\n    return ret;\n  },\n  pointToString: function (p) {\n    let s = p.x + \"/\" + p.y;\n    if (typeof p.z !== \"undefined\") {\n      s += \"/\" + p.z;\n    }\n    return s;\n  },\n  pointsToString: function (points) {\n    return \"[\" + points.map(utils.pointToString).join(\", \") + \"]\";\n  },\n  copy: function (obj) {\n    return JSON.parse(JSON.stringify(obj));\n  },\n  angle: function (o, v1, v2) {\n    const dx1 = v1.x - o.x,\n      dy1 = v1.y - o.y,\n      dx2 = v2.x - o.x,\n      dy2 = v2.y - o.y,\n      cross = dx1 * dy2 - dy1 * dx2,\n      dot = dx1 * dx2 + dy1 * dy2;\n    return atan2(cross, dot);\n  },\n  // round as string, to avoid rounding errors\n  round: function (v, d) {\n    const s = \"\" + v;\n    const pos = s.indexOf(\".\");\n    return parseFloat(s.substring(0, pos + 1 + d));\n  },\n  dist: function (p1, p2) {\n    const dx = p1.x - p2.x,\n      dy = p1.y - p2.y;\n    return sqrt(dx * dx + dy * dy);\n  },\n  closest: function (LUT, point) {\n    let mdist = pow(2, 63),\n      mpos,\n      d;\n    LUT.forEach(function (p, idx) {\n      d = utils.dist(point, p);\n      if (d < mdist) {\n        mdist = d;\n        mpos = idx;\n      }\n    });\n    return {\n      mdist: mdist,\n      mpos: mpos\n    };\n  },\n  abcratio: function (t, n) {\n    // see ratio(t) note on http://pomax.github.io/bezierinfo/#abc\n    if (n !== 2 && n !== 3) {\n      return false;\n    }\n    if (typeof t === \"undefined\") {\n      t = 0.5;\n    } else if (t === 0 || t === 1) {\n      return t;\n    }\n    const bottom = pow(t, n) + pow(1 - t, n),\n      top = bottom - 1;\n    return abs(top / bottom);\n  },\n  projectionratio: function (t, n) {\n    // see u(t) note on http://pomax.github.io/bezierinfo/#abc\n    if (n !== 2 && n !== 3) {\n      return false;\n    }\n    if (typeof t === \"undefined\") {\n      t = 0.5;\n    } else if (t === 0 || t === 1) {\n      return t;\n    }\n    const top = pow(1 - t, n),\n      bottom = pow(t, n) + top;\n    return top / bottom;\n  },\n  lli8: function (x1, y1, x2, y2, x3, y3, x4, y4) {\n    const nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),\n      ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),\n      d = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n    if (d == 0) {\n      return false;\n    }\n    return {\n      x: nx / d,\n      y: ny / d\n    };\n  },\n  lli4: function (p1, p2, p3, p4) {\n    const x1 = p1.x,\n      y1 = p1.y,\n      x2 = p2.x,\n      y2 = p2.y,\n      x3 = p3.x,\n      y3 = p3.y,\n      x4 = p4.x,\n      y4 = p4.y;\n    return utils.lli8(x1, y1, x2, y2, x3, y3, x4, y4);\n  },\n  lli: function (v1, v2) {\n    return utils.lli4(v1, v1.c, v2, v2.c);\n  },\n  makeline: function (p1, p2) {\n    return new Bezier(p1.x, p1.y, (p1.x + p2.x) / 2, (p1.y + p2.y) / 2, p2.x, p2.y);\n  },\n  findbbox: function (sections) {\n    let mx = nMax,\n      my = nMax,\n      MX = nMin,\n      MY = nMin;\n    sections.forEach(function (s) {\n      const bbox = s.bbox();\n      if (mx > bbox.x.min) mx = bbox.x.min;\n      if (my > bbox.y.min) my = bbox.y.min;\n      if (MX < bbox.x.max) MX = bbox.x.max;\n      if (MY < bbox.y.max) MY = bbox.y.max;\n    });\n    return {\n      x: {\n        min: mx,\n        mid: (mx + MX) / 2,\n        max: MX,\n        size: MX - mx\n      },\n      y: {\n        min: my,\n        mid: (my + MY) / 2,\n        max: MY,\n        size: MY - my\n      }\n    };\n  },\n  shapeintersections: function (s1, bbox1, s2, bbox2, curveIntersectionThreshold) {\n    if (!utils.bboxoverlap(bbox1, bbox2)) return [];\n    const intersections = [];\n    const a1 = [s1.startcap, s1.forward, s1.back, s1.endcap];\n    const a2 = [s2.startcap, s2.forward, s2.back, s2.endcap];\n    a1.forEach(function (l1) {\n      if (l1.virtual) return;\n      a2.forEach(function (l2) {\n        if (l2.virtual) return;\n        const iss = l1.intersects(l2, curveIntersectionThreshold);\n        if (iss.length > 0) {\n          iss.c1 = l1;\n          iss.c2 = l2;\n          iss.s1 = s1;\n          iss.s2 = s2;\n          intersections.push(iss);\n        }\n      });\n    });\n    return intersections;\n  },\n  makeshape: function (forward, back, curveIntersectionThreshold) {\n    const bpl = back.points.length;\n    const fpl = forward.points.length;\n    const start = utils.makeline(back.points[bpl - 1], forward.points[0]);\n    const end = utils.makeline(forward.points[fpl - 1], back.points[0]);\n    const shape = {\n      startcap: start,\n      forward: forward,\n      back: back,\n      endcap: end,\n      bbox: utils.findbbox([start, forward, back, end])\n    };\n    shape.intersections = function (s2) {\n      return utils.shapeintersections(shape, shape.bbox, s2, s2.bbox, curveIntersectionThreshold);\n    };\n    return shape;\n  },\n  getminmax: function (curve, d, list) {\n    if (!list) return {\n      min: 0,\n      max: 0\n    };\n    let min = nMax,\n      max = nMin,\n      t,\n      c;\n    if (list.indexOf(0) === -1) {\n      list = [0].concat(list);\n    }\n    if (list.indexOf(1) === -1) {\n      list.push(1);\n    }\n    for (let i = 0, len = list.length; i < len; i++) {\n      t = list[i];\n      c = curve.get(t);\n      if (c[d] < min) {\n        min = c[d];\n      }\n      if (c[d] > max) {\n        max = c[d];\n      }\n    }\n    return {\n      min: min,\n      mid: (min + max) / 2,\n      max: max,\n      size: max - min\n    };\n  },\n  align: function (points, line) {\n    const tx = line.p1.x,\n      ty = line.p1.y,\n      a = -atan2(line.p2.y - ty, line.p2.x - tx),\n      d = function (v) {\n        return {\n          x: (v.x - tx) * cos(a) - (v.y - ty) * sin(a),\n          y: (v.x - tx) * sin(a) + (v.y - ty) * cos(a)\n        };\n      };\n    return points.map(d);\n  },\n  roots: function (points, line) {\n    line = line || {\n      p1: {\n        x: 0,\n        y: 0\n      },\n      p2: {\n        x: 1,\n        y: 0\n      }\n    };\n    const order = points.length - 1;\n    const aligned = utils.align(points, line);\n    const reduce = function (t) {\n      return 0 <= t && t <= 1;\n    };\n    if (order === 2) {\n      const a = aligned[0].y,\n        b = aligned[1].y,\n        c = aligned[2].y,\n        d = a - 2 * b + c;\n      if (d !== 0) {\n        const m1 = -sqrt(b * b - a * c),\n          m2 = -a + b,\n          v1 = -(m1 + m2) / d,\n          v2 = -(-m1 + m2) / d;\n        return [v1, v2].filter(reduce);\n      } else if (b !== c && d === 0) {\n        return [(2 * b - c) / (2 * b - 2 * c)].filter(reduce);\n      }\n      return [];\n    }\n\n    // see http://www.trans4mind.com/personal_development/mathematics/polynomials/cubicAlgebra.htm\n    const pa = aligned[0].y,\n      pb = aligned[1].y,\n      pc = aligned[2].y,\n      pd = aligned[3].y;\n    let d = -pa + 3 * pb - 3 * pc + pd,\n      a = 3 * pa - 6 * pb + 3 * pc,\n      b = -3 * pa + 3 * pb,\n      c = pa;\n    if (utils.approximately(d, 0)) {\n      // this is not a cubic curve.\n      if (utils.approximately(a, 0)) {\n        // in fact, this is not a quadratic curve either.\n        if (utils.approximately(b, 0)) {\n          // in fact in fact, there are no solutions.\n          return [];\n        }\n        // linear solution:\n        return [-c / b].filter(reduce);\n      }\n      // quadratic solution:\n      const q = sqrt(b * b - 4 * a * c),\n        a2 = 2 * a;\n      return [(q - b) / a2, (-b - q) / a2].filter(reduce);\n    }\n\n    // at this point, we know we need a cubic solution:\n\n    a /= d;\n    b /= d;\n    c /= d;\n    const p = (3 * b - a * a) / 3,\n      p3 = p / 3,\n      q = (2 * a * a * a - 9 * a * b + 27 * c) / 27,\n      q2 = q / 2,\n      discriminant = q2 * q2 + p3 * p3 * p3;\n    let u1, v1, x1, x2, x3;\n    if (discriminant < 0) {\n      const mp3 = -p / 3,\n        mp33 = mp3 * mp3 * mp3,\n        r = sqrt(mp33),\n        t = -q / (2 * r),\n        cosphi = t < -1 ? -1 : t > 1 ? 1 : t,\n        phi = acos(cosphi),\n        crtr = crt(r),\n        t1 = 2 * crtr;\n      x1 = t1 * cos(phi / 3) - a / 3;\n      x2 = t1 * cos((phi + tau) / 3) - a / 3;\n      x3 = t1 * cos((phi + 2 * tau) / 3) - a / 3;\n      return [x1, x2, x3].filter(reduce);\n    } else if (discriminant === 0) {\n      u1 = q2 < 0 ? crt(-q2) : -crt(q2);\n      x1 = 2 * u1 - a / 3;\n      x2 = -u1 - a / 3;\n      return [x1, x2].filter(reduce);\n    } else {\n      const sd = sqrt(discriminant);\n      u1 = crt(-q2 + sd);\n      v1 = crt(q2 + sd);\n      return [u1 - v1 - a / 3].filter(reduce);\n    }\n  },\n  droots: function (p) {\n    // quadratic roots are easy\n    if (p.length === 3) {\n      const a = p[0],\n        b = p[1],\n        c = p[2],\n        d = a - 2 * b + c;\n      if (d !== 0) {\n        const m1 = -sqrt(b * b - a * c),\n          m2 = -a + b,\n          v1 = -(m1 + m2) / d,\n          v2 = -(-m1 + m2) / d;\n        return [v1, v2];\n      } else if (b !== c && d === 0) {\n        return [(2 * b - c) / (2 * (b - c))];\n      }\n      return [];\n    }\n\n    // linear roots are even easier\n    if (p.length === 2) {\n      const a = p[0],\n        b = p[1];\n      if (a !== b) {\n        return [a / (a - b)];\n      }\n      return [];\n    }\n    return [];\n  },\n  curvature: function (t, d1, d2, _3d, kOnly) {\n    let num,\n      dnm,\n      adk,\n      dk,\n      k = 0,\n      r = 0;\n\n    //\n    // We're using the following formula for curvature:\n    //\n    //              x'y\" - y'x\"\n    //   k(t) = ------------------\n    //           (x'² + y'²)^(3/2)\n    //\n    // from https://en.wikipedia.org/wiki/Radius_of_curvature#Definition\n    //\n    // With it corresponding 3D counterpart:\n    //\n    //          sqrt( (y'z\" - y\"z')² + (z'x\" - z\"x')² + (x'y\" - x\"y')²)\n    //   k(t) = -------------------------------------------------------\n    //                     (x'² + y'² + z'²)^(3/2)\n    //\n\n    const d = utils.compute(t, d1);\n    const dd = utils.compute(t, d2);\n    const qdsum = d.x * d.x + d.y * d.y;\n    if (_3d) {\n      num = sqrt(pow(d.y * dd.z - dd.y * d.z, 2) + pow(d.z * dd.x - dd.z * d.x, 2) + pow(d.x * dd.y - dd.x * d.y, 2));\n      dnm = pow(qdsum + d.z * d.z, 3 / 2);\n    } else {\n      num = d.x * dd.y - d.y * dd.x;\n      dnm = pow(qdsum, 3 / 2);\n    }\n    if (num === 0 || dnm === 0) {\n      return {\n        k: 0,\n        r: 0\n      };\n    }\n    k = num / dnm;\n    r = dnm / num;\n\n    // We're also computing the derivative of kappa, because\n    // there is value in knowing the rate of change for the\n    // curvature along the curve. And we're just going to\n    // ballpark it based on an epsilon.\n    if (!kOnly) {\n      // compute k'(t) based on the interval before, and after it,\n      // to at least try to not introduce forward/backward pass bias.\n      const pk = utils.curvature(t - 0.001, d1, d2, _3d, true).k;\n      const nk = utils.curvature(t + 0.001, d1, d2, _3d, true).k;\n      dk = (nk - k + (k - pk)) / 2;\n      adk = (abs(nk - k) + abs(k - pk)) / 2;\n    }\n    return {\n      k: k,\n      r: r,\n      dk: dk,\n      adk: adk\n    };\n  },\n  inflections: function (points) {\n    if (points.length < 4) return [];\n\n    // FIXME: TODO: add in inflection abstraction for quartic+ curves?\n\n    const p = utils.align(points, {\n        p1: points[0],\n        p2: points.slice(-1)[0]\n      }),\n      a = p[2].x * p[1].y,\n      b = p[3].x * p[1].y,\n      c = p[1].x * p[2].y,\n      d = p[3].x * p[2].y,\n      v1 = 18 * (-3 * a + 2 * b + 3 * c - d),\n      v2 = 18 * (3 * a - b - 3 * c),\n      v3 = 18 * (c - a);\n    if (utils.approximately(v1, 0)) {\n      if (!utils.approximately(v2, 0)) {\n        let t = -v3 / v2;\n        if (0 <= t && t <= 1) return [t];\n      }\n      return [];\n    }\n    const d2 = 2 * v1;\n    if (utils.approximately(d2, 0)) return [];\n    const trm = v2 * v2 - 4 * v1 * v3;\n    if (trm < 0) return [];\n    const sq = Math.sqrt(trm);\n    return [(sq - v2) / d2, -(v2 + sq) / d2].filter(function (r) {\n      return 0 <= r && r <= 1;\n    });\n  },\n  bboxoverlap: function (b1, b2) {\n    const dims = [\"x\", \"y\"],\n      len = dims.length;\n    for (let i = 0, dim, l, t, d; i < len; i++) {\n      dim = dims[i];\n      l = b1[dim].mid;\n      t = b2[dim].mid;\n      d = (b1[dim].size + b2[dim].size) / 2;\n      if (abs(l - t) >= d) return false;\n    }\n    return true;\n  },\n  expandbox: function (bbox, _bbox) {\n    if (_bbox.x.min < bbox.x.min) {\n      bbox.x.min = _bbox.x.min;\n    }\n    if (_bbox.y.min < bbox.y.min) {\n      bbox.y.min = _bbox.y.min;\n    }\n    if (_bbox.z && _bbox.z.min < bbox.z.min) {\n      bbox.z.min = _bbox.z.min;\n    }\n    if (_bbox.x.max > bbox.x.max) {\n      bbox.x.max = _bbox.x.max;\n    }\n    if (_bbox.y.max > bbox.y.max) {\n      bbox.y.max = _bbox.y.max;\n    }\n    if (_bbox.z && _bbox.z.max > bbox.z.max) {\n      bbox.z.max = _bbox.z.max;\n    }\n    bbox.x.mid = (bbox.x.min + bbox.x.max) / 2;\n    bbox.y.mid = (bbox.y.min + bbox.y.max) / 2;\n    if (bbox.z) {\n      bbox.z.mid = (bbox.z.min + bbox.z.max) / 2;\n    }\n    bbox.x.size = bbox.x.max - bbox.x.min;\n    bbox.y.size = bbox.y.max - bbox.y.min;\n    if (bbox.z) {\n      bbox.z.size = bbox.z.max - bbox.z.min;\n    }\n  },\n  pairiteration: function (c1, c2, curveIntersectionThreshold) {\n    const c1b = c1.bbox(),\n      c2b = c2.bbox(),\n      r = 100000,\n      threshold = curveIntersectionThreshold || 0.5;\n    if (c1b.x.size + c1b.y.size < threshold && c2b.x.size + c2b.y.size < threshold) {\n      return [(r * (c1._t1 + c1._t2) / 2 | 0) / r + \"/\" + (r * (c2._t1 + c2._t2) / 2 | 0) / r];\n    }\n    let cc1 = c1.split(0.5),\n      cc2 = c2.split(0.5),\n      pairs = [{\n        left: cc1.left,\n        right: cc2.left\n      }, {\n        left: cc1.left,\n        right: cc2.right\n      }, {\n        left: cc1.right,\n        right: cc2.right\n      }, {\n        left: cc1.right,\n        right: cc2.left\n      }];\n    pairs = pairs.filter(function (pair) {\n      return utils.bboxoverlap(pair.left.bbox(), pair.right.bbox());\n    });\n    let results = [];\n    if (pairs.length === 0) return results;\n    pairs.forEach(function (pair) {\n      results = results.concat(utils.pairiteration(pair.left, pair.right, threshold));\n    });\n    results = results.filter(function (v, i) {\n      return results.indexOf(v) === i;\n    });\n    return results;\n  },\n  getccenter: function (p1, p2, p3) {\n    const dx1 = p2.x - p1.x,\n      dy1 = p2.y - p1.y,\n      dx2 = p3.x - p2.x,\n      dy2 = p3.y - p2.y,\n      dx1p = dx1 * cos(quart) - dy1 * sin(quart),\n      dy1p = dx1 * sin(quart) + dy1 * cos(quart),\n      dx2p = dx2 * cos(quart) - dy2 * sin(quart),\n      dy2p = dx2 * sin(quart) + dy2 * cos(quart),\n      // chord midpoints\n      mx1 = (p1.x + p2.x) / 2,\n      my1 = (p1.y + p2.y) / 2,\n      mx2 = (p2.x + p3.x) / 2,\n      my2 = (p2.y + p3.y) / 2,\n      // midpoint offsets\n      mx1n = mx1 + dx1p,\n      my1n = my1 + dy1p,\n      mx2n = mx2 + dx2p,\n      my2n = my2 + dy2p,\n      // intersection of these lines:\n      arc = utils.lli8(mx1, my1, mx1n, my1n, mx2, my2, mx2n, my2n),\n      r = utils.dist(arc, p1);\n\n    // arc start/end values, over mid point:\n    let s = atan2(p1.y - arc.y, p1.x - arc.x),\n      m = atan2(p2.y - arc.y, p2.x - arc.x),\n      e = atan2(p3.y - arc.y, p3.x - arc.x),\n      _;\n\n    // determine arc direction (cw/ccw correction)\n    if (s < e) {\n      // if s<m<e, arc(s, e)\n      // if m<s<e, arc(e, s + tau)\n      // if s<e<m, arc(e, s + tau)\n      if (s > m || m > e) {\n        s += tau;\n      }\n      if (s > e) {\n        _ = e;\n        e = s;\n        s = _;\n      }\n    } else {\n      // if e<m<s, arc(e, s)\n      // if m<e<s, arc(s, e + tau)\n      // if e<s<m, arc(s, e + tau)\n      if (e < m && m < s) {\n        _ = e;\n        e = s;\n        s = _;\n      } else {\n        e += tau;\n      }\n    }\n    // assign and done.\n    arc.s = s;\n    arc.e = e;\n    arc.r = r;\n    return arc;\n  },\n  numberSort: function (a, b) {\n    return a - b;\n  }\n};\nexport { utils };","map":{"version":3,"names":["Bezier","abs","cos","sin","acos","atan2","sqrt","pow","Math","crt","v","pi","PI","tau","quart","epsilon","nMax","Number","MAX_SAFE_INTEGER","nMin","MIN_SAFE_INTEGER","ZERO","x","y","z","utils","Tvalues","Cvalues","arcfn","t","derivativeFn","d","l","compute","points","_3d","order","length","mt","p","ret","mt2","t2","a","b","c","dCpts","JSON","parse","stringify","i","splice","computeWithRatios","ratios","r","f1","f2","f3","f4","derive","dpoints","list","j","dpt","push","between","m","M","approximately","precision","len","sum","map","ds","de","ts","te","d1","d2","v2","lerp","v1","undefined","pointToString","s","pointsToString","join","copy","obj","angle","o","dx1","dy1","dx2","dy2","cross","dot","round","pos","indexOf","parseFloat","substring","dist","p1","p2","dx","dy","closest","LUT","point","mdist","mpos","forEach","idx","abcratio","n","bottom","top","projectionratio","lli8","x1","y1","x2","y2","x3","y3","x4","y4","nx","ny","lli4","p3","p4","lli","makeline","findbbox","sections","mx","my","MX","MY","bbox","min","max","mid","size","shapeintersections","s1","bbox1","s2","bbox2","curveIntersectionThreshold","bboxoverlap","intersections","a1","startcap","forward","back","endcap","a2","l1","virtual","l2","iss","intersects","c1","c2","makeshape","bpl","fpl","start","end","shape","getminmax","curve","concat","get","align","line","tx","ty","roots","aligned","reduce","m1","m2","filter","pa","pb","pc","pd","q","q2","discriminant","u1","mp3","mp33","cosphi","phi","crtr","t1","sd","droots","curvature","kOnly","num","dnm","adk","dk","k","dd","qdsum","pk","nk","inflections","slice","v3","trm","sq","b1","b2","dims","dim","expandbox","_bbox","pairiteration","c1b","c2b","threshold","_t1","_t2","cc1","split","cc2","pairs","left","right","pair","results","getccenter","dx1p","dy1p","dx2p","dy2p","mx1","my1","mx2","my2","mx1n","my1n","mx2n","my2n","arc","e","_","numberSort"],"sources":["/Users/sunilbista/Personal/Capstone_project/frontend/node_modules/bezier-js/src/utils.js"],"sourcesContent":["import { Bezier } from \"./bezier.js\";\n\n// math-inlining.\nconst { abs, cos, sin, acos, atan2, sqrt, pow } = Math;\n\n// cube root function yielding real roots\nfunction crt(v) {\n  return v < 0 ? -pow(-v, 1 / 3) : pow(v, 1 / 3);\n}\n\n// trig constants\nconst pi = Math.PI,\n  tau = 2 * pi,\n  quart = pi / 2,\n  // float precision significant decimal\n  epsilon = 0.000001,\n  // extremas used in bbox calculation and similar algorithms\n  nMax = Number.MAX_SAFE_INTEGER || 9007199254740991,\n  nMin = Number.MIN_SAFE_INTEGER || -9007199254740991,\n  // a zero coordinate, which is surprisingly useful\n  ZERO = { x: 0, y: 0, z: 0 };\n\n// Bezier utility functions\nconst utils = {\n  // Legendre-Gauss abscissae with n=24 (x_i values, defined at i=n as the roots of the nth order Legendre polynomial Pn(x))\n  Tvalues: [\n    -0.0640568928626056260850430826247450385909,\n    0.0640568928626056260850430826247450385909,\n    -0.1911188674736163091586398207570696318404,\n    0.1911188674736163091586398207570696318404,\n    -0.3150426796961633743867932913198102407864,\n    0.3150426796961633743867932913198102407864,\n    -0.4337935076260451384870842319133497124524,\n    0.4337935076260451384870842319133497124524,\n    -0.5454214713888395356583756172183723700107,\n    0.5454214713888395356583756172183723700107,\n    -0.6480936519369755692524957869107476266696,\n    0.6480936519369755692524957869107476266696,\n    -0.7401241915785543642438281030999784255232,\n    0.7401241915785543642438281030999784255232,\n    -0.8200019859739029219539498726697452080761,\n    0.8200019859739029219539498726697452080761,\n    -0.8864155270044010342131543419821967550873,\n    0.8864155270044010342131543419821967550873,\n    -0.9382745520027327585236490017087214496548,\n    0.9382745520027327585236490017087214496548,\n    -0.9747285559713094981983919930081690617411,\n    0.9747285559713094981983919930081690617411,\n    -0.9951872199970213601799974097007368118745,\n    0.9951872199970213601799974097007368118745,\n  ],\n\n  // Legendre-Gauss weights with n=24 (w_i values, defined by a function linked to in the Bezier primer article)\n  Cvalues: [\n    0.1279381953467521569740561652246953718517,\n    0.1279381953467521569740561652246953718517,\n    0.1258374563468282961213753825111836887264,\n    0.1258374563468282961213753825111836887264,\n    0.121670472927803391204463153476262425607,\n    0.121670472927803391204463153476262425607,\n    0.1155056680537256013533444839067835598622,\n    0.1155056680537256013533444839067835598622,\n    0.1074442701159656347825773424466062227946,\n    0.1074442701159656347825773424466062227946,\n    0.0976186521041138882698806644642471544279,\n    0.0976186521041138882698806644642471544279,\n    0.086190161531953275917185202983742667185,\n    0.086190161531953275917185202983742667185,\n    0.0733464814110803057340336152531165181193,\n    0.0733464814110803057340336152531165181193,\n    0.0592985849154367807463677585001085845412,\n    0.0592985849154367807463677585001085845412,\n    0.0442774388174198061686027482113382288593,\n    0.0442774388174198061686027482113382288593,\n    0.0285313886289336631813078159518782864491,\n    0.0285313886289336631813078159518782864491,\n    0.0123412297999871995468056670700372915759,\n    0.0123412297999871995468056670700372915759,\n  ],\n\n  arcfn: function (t, derivativeFn) {\n    const d = derivativeFn(t);\n    let l = d.x * d.x + d.y * d.y;\n    if (typeof d.z !== \"undefined\") {\n      l += d.z * d.z;\n    }\n    return sqrt(l);\n  },\n\n  compute: function (t, points, _3d) {\n    // shortcuts\n    if (t === 0) {\n      points[0].t = 0;\n      return points[0];\n    }\n\n    const order = points.length - 1;\n\n    if (t === 1) {\n      points[order].t = 1;\n      return points[order];\n    }\n\n    const mt = 1 - t;\n    let p = points;\n\n    // constant?\n    if (order === 0) {\n      points[0].t = t;\n      return points[0];\n    }\n\n    // linear?\n    if (order === 1) {\n      const ret = {\n        x: mt * p[0].x + t * p[1].x,\n        y: mt * p[0].y + t * p[1].y,\n        t: t,\n      };\n      if (_3d) {\n        ret.z = mt * p[0].z + t * p[1].z;\n      }\n      return ret;\n    }\n\n    // quadratic/cubic curve?\n    if (order < 4) {\n      let mt2 = mt * mt,\n        t2 = t * t,\n        a,\n        b,\n        c,\n        d = 0;\n      if (order === 2) {\n        p = [p[0], p[1], p[2], ZERO];\n        a = mt2;\n        b = mt * t * 2;\n        c = t2;\n      } else if (order === 3) {\n        a = mt2 * mt;\n        b = mt2 * t * 3;\n        c = mt * t2 * 3;\n        d = t * t2;\n      }\n      const ret = {\n        x: a * p[0].x + b * p[1].x + c * p[2].x + d * p[3].x,\n        y: a * p[0].y + b * p[1].y + c * p[2].y + d * p[3].y,\n        t: t,\n      };\n      if (_3d) {\n        ret.z = a * p[0].z + b * p[1].z + c * p[2].z + d * p[3].z;\n      }\n      return ret;\n    }\n\n    // higher order curves: use de Casteljau's computation\n    const dCpts = JSON.parse(JSON.stringify(points));\n    while (dCpts.length > 1) {\n      for (let i = 0; i < dCpts.length - 1; i++) {\n        dCpts[i] = {\n          x: dCpts[i].x + (dCpts[i + 1].x - dCpts[i].x) * t,\n          y: dCpts[i].y + (dCpts[i + 1].y - dCpts[i].y) * t,\n        };\n        if (typeof dCpts[i].z !== \"undefined\") {\n          dCpts[i].z = dCpts[i].z + (dCpts[i + 1].z - dCpts[i].z) * t;\n        }\n      }\n      dCpts.splice(dCpts.length - 1, 1);\n    }\n    dCpts[0].t = t;\n    return dCpts[0];\n  },\n\n  computeWithRatios: function (t, points, ratios, _3d) {\n    const mt = 1 - t,\n      r = ratios,\n      p = points;\n\n    let f1 = r[0],\n      f2 = r[1],\n      f3 = r[2],\n      f4 = r[3],\n      d;\n\n    // spec for linear\n    f1 *= mt;\n    f2 *= t;\n\n    if (p.length === 2) {\n      d = f1 + f2;\n      return {\n        x: (f1 * p[0].x + f2 * p[1].x) / d,\n        y: (f1 * p[0].y + f2 * p[1].y) / d,\n        z: !_3d ? false : (f1 * p[0].z + f2 * p[1].z) / d,\n        t: t,\n      };\n    }\n\n    // upgrade to quadratic\n    f1 *= mt;\n    f2 *= 2 * mt;\n    f3 *= t * t;\n\n    if (p.length === 3) {\n      d = f1 + f2 + f3;\n      return {\n        x: (f1 * p[0].x + f2 * p[1].x + f3 * p[2].x) / d,\n        y: (f1 * p[0].y + f2 * p[1].y + f3 * p[2].y) / d,\n        z: !_3d ? false : (f1 * p[0].z + f2 * p[1].z + f3 * p[2].z) / d,\n        t: t,\n      };\n    }\n\n    // upgrade to cubic\n    f1 *= mt;\n    f2 *= 1.5 * mt;\n    f3 *= 3 * mt;\n    f4 *= t * t * t;\n\n    if (p.length === 4) {\n      d = f1 + f2 + f3 + f4;\n      return {\n        x: (f1 * p[0].x + f2 * p[1].x + f3 * p[2].x + f4 * p[3].x) / d,\n        y: (f1 * p[0].y + f2 * p[1].y + f3 * p[2].y + f4 * p[3].y) / d,\n        z: !_3d\n          ? false\n          : (f1 * p[0].z + f2 * p[1].z + f3 * p[2].z + f4 * p[3].z) / d,\n        t: t,\n      };\n    }\n  },\n\n  derive: function (points, _3d) {\n    const dpoints = [];\n    for (let p = points, d = p.length, c = d - 1; d > 1; d--, c--) {\n      const list = [];\n      for (let j = 0, dpt; j < c; j++) {\n        dpt = {\n          x: c * (p[j + 1].x - p[j].x),\n          y: c * (p[j + 1].y - p[j].y),\n        };\n        if (_3d) {\n          dpt.z = c * (p[j + 1].z - p[j].z);\n        }\n        list.push(dpt);\n      }\n      dpoints.push(list);\n      p = list;\n    }\n    return dpoints;\n  },\n\n  between: function (v, m, M) {\n    return (\n      (m <= v && v <= M) ||\n      utils.approximately(v, m) ||\n      utils.approximately(v, M)\n    );\n  },\n\n  approximately: function (a, b, precision) {\n    return abs(a - b) <= (precision || epsilon);\n  },\n\n  length: function (derivativeFn) {\n    const z = 0.5,\n      len = utils.Tvalues.length;\n\n    let sum = 0;\n\n    for (let i = 0, t; i < len; i++) {\n      t = z * utils.Tvalues[i] + z;\n      sum += utils.Cvalues[i] * utils.arcfn(t, derivativeFn);\n    }\n    return z * sum;\n  },\n\n  map: function (v, ds, de, ts, te) {\n    const d1 = de - ds,\n      d2 = te - ts,\n      v2 = v - ds,\n      r = v2 / d1;\n    return ts + d2 * r;\n  },\n\n  lerp: function (r, v1, v2) {\n    const ret = {\n      x: v1.x + r * (v2.x - v1.x),\n      y: v1.y + r * (v2.y - v1.y),\n    };\n    if (v1.z !== undefined && v2.z !== undefined) {\n      ret.z = v1.z + r * (v2.z - v1.z);\n    }\n    return ret;\n  },\n\n  pointToString: function (p) {\n    let s = p.x + \"/\" + p.y;\n    if (typeof p.z !== \"undefined\") {\n      s += \"/\" + p.z;\n    }\n    return s;\n  },\n\n  pointsToString: function (points) {\n    return \"[\" + points.map(utils.pointToString).join(\", \") + \"]\";\n  },\n\n  copy: function (obj) {\n    return JSON.parse(JSON.stringify(obj));\n  },\n\n  angle: function (o, v1, v2) {\n    const dx1 = v1.x - o.x,\n      dy1 = v1.y - o.y,\n      dx2 = v2.x - o.x,\n      dy2 = v2.y - o.y,\n      cross = dx1 * dy2 - dy1 * dx2,\n      dot = dx1 * dx2 + dy1 * dy2;\n    return atan2(cross, dot);\n  },\n\n  // round as string, to avoid rounding errors\n  round: function (v, d) {\n    const s = \"\" + v;\n    const pos = s.indexOf(\".\");\n    return parseFloat(s.substring(0, pos + 1 + d));\n  },\n\n  dist: function (p1, p2) {\n    const dx = p1.x - p2.x,\n      dy = p1.y - p2.y;\n    return sqrt(dx * dx + dy * dy);\n  },\n\n  closest: function (LUT, point) {\n    let mdist = pow(2, 63),\n      mpos,\n      d;\n    LUT.forEach(function (p, idx) {\n      d = utils.dist(point, p);\n      if (d < mdist) {\n        mdist = d;\n        mpos = idx;\n      }\n    });\n    return { mdist: mdist, mpos: mpos };\n  },\n\n  abcratio: function (t, n) {\n    // see ratio(t) note on http://pomax.github.io/bezierinfo/#abc\n    if (n !== 2 && n !== 3) {\n      return false;\n    }\n    if (typeof t === \"undefined\") {\n      t = 0.5;\n    } else if (t === 0 || t === 1) {\n      return t;\n    }\n    const bottom = pow(t, n) + pow(1 - t, n),\n      top = bottom - 1;\n    return abs(top / bottom);\n  },\n\n  projectionratio: function (t, n) {\n    // see u(t) note on http://pomax.github.io/bezierinfo/#abc\n    if (n !== 2 && n !== 3) {\n      return false;\n    }\n    if (typeof t === \"undefined\") {\n      t = 0.5;\n    } else if (t === 0 || t === 1) {\n      return t;\n    }\n    const top = pow(1 - t, n),\n      bottom = pow(t, n) + top;\n    return top / bottom;\n  },\n\n  lli8: function (x1, y1, x2, y2, x3, y3, x4, y4) {\n    const nx =\n        (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4),\n      ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4),\n      d = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n    if (d == 0) {\n      return false;\n    }\n    return { x: nx / d, y: ny / d };\n  },\n\n  lli4: function (p1, p2, p3, p4) {\n    const x1 = p1.x,\n      y1 = p1.y,\n      x2 = p2.x,\n      y2 = p2.y,\n      x3 = p3.x,\n      y3 = p3.y,\n      x4 = p4.x,\n      y4 = p4.y;\n    return utils.lli8(x1, y1, x2, y2, x3, y3, x4, y4);\n  },\n\n  lli: function (v1, v2) {\n    return utils.lli4(v1, v1.c, v2, v2.c);\n  },\n\n  makeline: function (p1, p2) {\n    return new Bezier(\n      p1.x,\n      p1.y,\n      (p1.x + p2.x) / 2,\n      (p1.y + p2.y) / 2,\n      p2.x,\n      p2.y\n    );\n  },\n\n  findbbox: function (sections) {\n    let mx = nMax,\n      my = nMax,\n      MX = nMin,\n      MY = nMin;\n    sections.forEach(function (s) {\n      const bbox = s.bbox();\n      if (mx > bbox.x.min) mx = bbox.x.min;\n      if (my > bbox.y.min) my = bbox.y.min;\n      if (MX < bbox.x.max) MX = bbox.x.max;\n      if (MY < bbox.y.max) MY = bbox.y.max;\n    });\n    return {\n      x: { min: mx, mid: (mx + MX) / 2, max: MX, size: MX - mx },\n      y: { min: my, mid: (my + MY) / 2, max: MY, size: MY - my },\n    };\n  },\n\n  shapeintersections: function (\n    s1,\n    bbox1,\n    s2,\n    bbox2,\n    curveIntersectionThreshold\n  ) {\n    if (!utils.bboxoverlap(bbox1, bbox2)) return [];\n    const intersections = [];\n    const a1 = [s1.startcap, s1.forward, s1.back, s1.endcap];\n    const a2 = [s2.startcap, s2.forward, s2.back, s2.endcap];\n    a1.forEach(function (l1) {\n      if (l1.virtual) return;\n      a2.forEach(function (l2) {\n        if (l2.virtual) return;\n        const iss = l1.intersects(l2, curveIntersectionThreshold);\n        if (iss.length > 0) {\n          iss.c1 = l1;\n          iss.c2 = l2;\n          iss.s1 = s1;\n          iss.s2 = s2;\n          intersections.push(iss);\n        }\n      });\n    });\n    return intersections;\n  },\n\n  makeshape: function (forward, back, curveIntersectionThreshold) {\n    const bpl = back.points.length;\n    const fpl = forward.points.length;\n    const start = utils.makeline(back.points[bpl - 1], forward.points[0]);\n    const end = utils.makeline(forward.points[fpl - 1], back.points[0]);\n    const shape = {\n      startcap: start,\n      forward: forward,\n      back: back,\n      endcap: end,\n      bbox: utils.findbbox([start, forward, back, end]),\n    };\n    shape.intersections = function (s2) {\n      return utils.shapeintersections(\n        shape,\n        shape.bbox,\n        s2,\n        s2.bbox,\n        curveIntersectionThreshold\n      );\n    };\n    return shape;\n  },\n\n  getminmax: function (curve, d, list) {\n    if (!list) return { min: 0, max: 0 };\n    let min = nMax,\n      max = nMin,\n      t,\n      c;\n    if (list.indexOf(0) === -1) {\n      list = [0].concat(list);\n    }\n    if (list.indexOf(1) === -1) {\n      list.push(1);\n    }\n    for (let i = 0, len = list.length; i < len; i++) {\n      t = list[i];\n      c = curve.get(t);\n      if (c[d] < min) {\n        min = c[d];\n      }\n      if (c[d] > max) {\n        max = c[d];\n      }\n    }\n    return { min: min, mid: (min + max) / 2, max: max, size: max - min };\n  },\n\n  align: function (points, line) {\n    const tx = line.p1.x,\n      ty = line.p1.y,\n      a = -atan2(line.p2.y - ty, line.p2.x - tx),\n      d = function (v) {\n        return {\n          x: (v.x - tx) * cos(a) - (v.y - ty) * sin(a),\n          y: (v.x - tx) * sin(a) + (v.y - ty) * cos(a),\n        };\n      };\n    return points.map(d);\n  },\n\n  roots: function (points, line) {\n    line = line || { p1: { x: 0, y: 0 }, p2: { x: 1, y: 0 } };\n\n    const order = points.length - 1;\n    const aligned = utils.align(points, line);\n    const reduce = function (t) {\n      return 0 <= t && t <= 1;\n    };\n\n    if (order === 2) {\n      const a = aligned[0].y,\n        b = aligned[1].y,\n        c = aligned[2].y,\n        d = a - 2 * b + c;\n      if (d !== 0) {\n        const m1 = -sqrt(b * b - a * c),\n          m2 = -a + b,\n          v1 = -(m1 + m2) / d,\n          v2 = -(-m1 + m2) / d;\n        return [v1, v2].filter(reduce);\n      } else if (b !== c && d === 0) {\n        return [(2 * b - c) / (2 * b - 2 * c)].filter(reduce);\n      }\n      return [];\n    }\n\n    // see http://www.trans4mind.com/personal_development/mathematics/polynomials/cubicAlgebra.htm\n    const pa = aligned[0].y,\n      pb = aligned[1].y,\n      pc = aligned[2].y,\n      pd = aligned[3].y;\n\n    let d = -pa + 3 * pb - 3 * pc + pd,\n      a = 3 * pa - 6 * pb + 3 * pc,\n      b = -3 * pa + 3 * pb,\n      c = pa;\n\n    if (utils.approximately(d, 0)) {\n      // this is not a cubic curve.\n      if (utils.approximately(a, 0)) {\n        // in fact, this is not a quadratic curve either.\n        if (utils.approximately(b, 0)) {\n          // in fact in fact, there are no solutions.\n          return [];\n        }\n        // linear solution:\n        return [-c / b].filter(reduce);\n      }\n      // quadratic solution:\n      const q = sqrt(b * b - 4 * a * c),\n        a2 = 2 * a;\n      return [(q - b) / a2, (-b - q) / a2].filter(reduce);\n    }\n\n    // at this point, we know we need a cubic solution:\n\n    a /= d;\n    b /= d;\n    c /= d;\n\n    const p = (3 * b - a * a) / 3,\n      p3 = p / 3,\n      q = (2 * a * a * a - 9 * a * b + 27 * c) / 27,\n      q2 = q / 2,\n      discriminant = q2 * q2 + p3 * p3 * p3;\n\n    let u1, v1, x1, x2, x3;\n    if (discriminant < 0) {\n      const mp3 = -p / 3,\n        mp33 = mp3 * mp3 * mp3,\n        r = sqrt(mp33),\n        t = -q / (2 * r),\n        cosphi = t < -1 ? -1 : t > 1 ? 1 : t,\n        phi = acos(cosphi),\n        crtr = crt(r),\n        t1 = 2 * crtr;\n      x1 = t1 * cos(phi / 3) - a / 3;\n      x2 = t1 * cos((phi + tau) / 3) - a / 3;\n      x3 = t1 * cos((phi + 2 * tau) / 3) - a / 3;\n      return [x1, x2, x3].filter(reduce);\n    } else if (discriminant === 0) {\n      u1 = q2 < 0 ? crt(-q2) : -crt(q2);\n      x1 = 2 * u1 - a / 3;\n      x2 = -u1 - a / 3;\n      return [x1, x2].filter(reduce);\n    } else {\n      const sd = sqrt(discriminant);\n      u1 = crt(-q2 + sd);\n      v1 = crt(q2 + sd);\n      return [u1 - v1 - a / 3].filter(reduce);\n    }\n  },\n\n  droots: function (p) {\n    // quadratic roots are easy\n    if (p.length === 3) {\n      const a = p[0],\n        b = p[1],\n        c = p[2],\n        d = a - 2 * b + c;\n      if (d !== 0) {\n        const m1 = -sqrt(b * b - a * c),\n          m2 = -a + b,\n          v1 = -(m1 + m2) / d,\n          v2 = -(-m1 + m2) / d;\n        return [v1, v2];\n      } else if (b !== c && d === 0) {\n        return [(2 * b - c) / (2 * (b - c))];\n      }\n      return [];\n    }\n\n    // linear roots are even easier\n    if (p.length === 2) {\n      const a = p[0],\n        b = p[1];\n      if (a !== b) {\n        return [a / (a - b)];\n      }\n      return [];\n    }\n\n    return [];\n  },\n\n  curvature: function (t, d1, d2, _3d, kOnly) {\n    let num,\n      dnm,\n      adk,\n      dk,\n      k = 0,\n      r = 0;\n\n    //\n    // We're using the following formula for curvature:\n    //\n    //              x'y\" - y'x\"\n    //   k(t) = ------------------\n    //           (x'² + y'²)^(3/2)\n    //\n    // from https://en.wikipedia.org/wiki/Radius_of_curvature#Definition\n    //\n    // With it corresponding 3D counterpart:\n    //\n    //          sqrt( (y'z\" - y\"z')² + (z'x\" - z\"x')² + (x'y\" - x\"y')²)\n    //   k(t) = -------------------------------------------------------\n    //                     (x'² + y'² + z'²)^(3/2)\n    //\n\n    const d = utils.compute(t, d1);\n    const dd = utils.compute(t, d2);\n    const qdsum = d.x * d.x + d.y * d.y;\n\n    if (_3d) {\n      num = sqrt(\n        pow(d.y * dd.z - dd.y * d.z, 2) +\n          pow(d.z * dd.x - dd.z * d.x, 2) +\n          pow(d.x * dd.y - dd.x * d.y, 2)\n      );\n      dnm = pow(qdsum + d.z * d.z, 3 / 2);\n    } else {\n      num = d.x * dd.y - d.y * dd.x;\n      dnm = pow(qdsum, 3 / 2);\n    }\n\n    if (num === 0 || dnm === 0) {\n      return { k: 0, r: 0 };\n    }\n\n    k = num / dnm;\n    r = dnm / num;\n\n    // We're also computing the derivative of kappa, because\n    // there is value in knowing the rate of change for the\n    // curvature along the curve. And we're just going to\n    // ballpark it based on an epsilon.\n    if (!kOnly) {\n      // compute k'(t) based on the interval before, and after it,\n      // to at least try to not introduce forward/backward pass bias.\n      const pk = utils.curvature(t - 0.001, d1, d2, _3d, true).k;\n      const nk = utils.curvature(t + 0.001, d1, d2, _3d, true).k;\n      dk = (nk - k + (k - pk)) / 2;\n      adk = (abs(nk - k) + abs(k - pk)) / 2;\n    }\n\n    return { k: k, r: r, dk: dk, adk: adk };\n  },\n\n  inflections: function (points) {\n    if (points.length < 4) return [];\n\n    // FIXME: TODO: add in inflection abstraction for quartic+ curves?\n\n    const p = utils.align(points, { p1: points[0], p2: points.slice(-1)[0] }),\n      a = p[2].x * p[1].y,\n      b = p[3].x * p[1].y,\n      c = p[1].x * p[2].y,\n      d = p[3].x * p[2].y,\n      v1 = 18 * (-3 * a + 2 * b + 3 * c - d),\n      v2 = 18 * (3 * a - b - 3 * c),\n      v3 = 18 * (c - a);\n\n    if (utils.approximately(v1, 0)) {\n      if (!utils.approximately(v2, 0)) {\n        let t = -v3 / v2;\n        if (0 <= t && t <= 1) return [t];\n      }\n      return [];\n    }\n\n    const d2 = 2 * v1;\n\n    if (utils.approximately(d2, 0)) return [];\n\n    const trm = v2 * v2 - 4 * v1 * v3;\n\n    if (trm < 0) return [];\n\n    const sq = Math.sqrt(trm);\n\n    return [(sq - v2) / d2, -(v2 + sq) / d2].filter(function (r) {\n      return 0 <= r && r <= 1;\n    });\n  },\n\n  bboxoverlap: function (b1, b2) {\n    const dims = [\"x\", \"y\"],\n      len = dims.length;\n\n    for (let i = 0, dim, l, t, d; i < len; i++) {\n      dim = dims[i];\n      l = b1[dim].mid;\n      t = b2[dim].mid;\n      d = (b1[dim].size + b2[dim].size) / 2;\n      if (abs(l - t) >= d) return false;\n    }\n    return true;\n  },\n\n  expandbox: function (bbox, _bbox) {\n    if (_bbox.x.min < bbox.x.min) {\n      bbox.x.min = _bbox.x.min;\n    }\n    if (_bbox.y.min < bbox.y.min) {\n      bbox.y.min = _bbox.y.min;\n    }\n    if (_bbox.z && _bbox.z.min < bbox.z.min) {\n      bbox.z.min = _bbox.z.min;\n    }\n    if (_bbox.x.max > bbox.x.max) {\n      bbox.x.max = _bbox.x.max;\n    }\n    if (_bbox.y.max > bbox.y.max) {\n      bbox.y.max = _bbox.y.max;\n    }\n    if (_bbox.z && _bbox.z.max > bbox.z.max) {\n      bbox.z.max = _bbox.z.max;\n    }\n    bbox.x.mid = (bbox.x.min + bbox.x.max) / 2;\n    bbox.y.mid = (bbox.y.min + bbox.y.max) / 2;\n    if (bbox.z) {\n      bbox.z.mid = (bbox.z.min + bbox.z.max) / 2;\n    }\n    bbox.x.size = bbox.x.max - bbox.x.min;\n    bbox.y.size = bbox.y.max - bbox.y.min;\n    if (bbox.z) {\n      bbox.z.size = bbox.z.max - bbox.z.min;\n    }\n  },\n\n  pairiteration: function (c1, c2, curveIntersectionThreshold) {\n    const c1b = c1.bbox(),\n      c2b = c2.bbox(),\n      r = 100000,\n      threshold = curveIntersectionThreshold || 0.5;\n\n    if (\n      c1b.x.size + c1b.y.size < threshold &&\n      c2b.x.size + c2b.y.size < threshold\n    ) {\n      return [\n        (((r * (c1._t1 + c1._t2)) / 2) | 0) / r +\n          \"/\" +\n          (((r * (c2._t1 + c2._t2)) / 2) | 0) / r,\n      ];\n    }\n\n    let cc1 = c1.split(0.5),\n      cc2 = c2.split(0.5),\n      pairs = [\n        { left: cc1.left, right: cc2.left },\n        { left: cc1.left, right: cc2.right },\n        { left: cc1.right, right: cc2.right },\n        { left: cc1.right, right: cc2.left },\n      ];\n\n    pairs = pairs.filter(function (pair) {\n      return utils.bboxoverlap(pair.left.bbox(), pair.right.bbox());\n    });\n\n    let results = [];\n\n    if (pairs.length === 0) return results;\n\n    pairs.forEach(function (pair) {\n      results = results.concat(\n        utils.pairiteration(pair.left, pair.right, threshold)\n      );\n    });\n\n    results = results.filter(function (v, i) {\n      return results.indexOf(v) === i;\n    });\n\n    return results;\n  },\n\n  getccenter: function (p1, p2, p3) {\n    const dx1 = p2.x - p1.x,\n      dy1 = p2.y - p1.y,\n      dx2 = p3.x - p2.x,\n      dy2 = p3.y - p2.y,\n      dx1p = dx1 * cos(quart) - dy1 * sin(quart),\n      dy1p = dx1 * sin(quart) + dy1 * cos(quart),\n      dx2p = dx2 * cos(quart) - dy2 * sin(quart),\n      dy2p = dx2 * sin(quart) + dy2 * cos(quart),\n      // chord midpoints\n      mx1 = (p1.x + p2.x) / 2,\n      my1 = (p1.y + p2.y) / 2,\n      mx2 = (p2.x + p3.x) / 2,\n      my2 = (p2.y + p3.y) / 2,\n      // midpoint offsets\n      mx1n = mx1 + dx1p,\n      my1n = my1 + dy1p,\n      mx2n = mx2 + dx2p,\n      my2n = my2 + dy2p,\n      // intersection of these lines:\n      arc = utils.lli8(mx1, my1, mx1n, my1n, mx2, my2, mx2n, my2n),\n      r = utils.dist(arc, p1);\n\n    // arc start/end values, over mid point:\n    let s = atan2(p1.y - arc.y, p1.x - arc.x),\n      m = atan2(p2.y - arc.y, p2.x - arc.x),\n      e = atan2(p3.y - arc.y, p3.x - arc.x),\n      _;\n\n    // determine arc direction (cw/ccw correction)\n    if (s < e) {\n      // if s<m<e, arc(s, e)\n      // if m<s<e, arc(e, s + tau)\n      // if s<e<m, arc(e, s + tau)\n      if (s > m || m > e) {\n        s += tau;\n      }\n      if (s > e) {\n        _ = e;\n        e = s;\n        s = _;\n      }\n    } else {\n      // if e<m<s, arc(e, s)\n      // if m<e<s, arc(s, e + tau)\n      // if e<s<m, arc(s, e + tau)\n      if (e < m && m < s) {\n        _ = e;\n        e = s;\n        s = _;\n      } else {\n        e += tau;\n      }\n    }\n    // assign and done.\n    arc.s = s;\n    arc.e = e;\n    arc.r = r;\n    return arc;\n  },\n\n  numberSort: function (a, b) {\n    return a - b;\n  },\n};\n\nexport { utils };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}