{"ast":null,"code":"var _jsxFileName = \"/Users/sunilbista/Personal/Capstone_project/frontend/src/components/ForceGraph/ForceGraph.js\";\n// This component, 'ForceGraph', is a React component that utilizes the 'react-force-graph-2d'\n// library to render a 2D force-directed graph visualization. It takes graph data as a prop\n// and customizes the appearance of nodes and their labels.\n\n// Import the 'react-force-graph-2d' library.\nimport ForceGraph2D from \"react-force-graph-2d\";\n\n// Define the 'ForceGraph' functional component.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ForceGraph = props => {\n  return (\n    /*#__PURE__*/\n    // Render a 'ForceGraph2D' component, passing in the provided 'props.data' as the graph data.\n    // Customize the appearance and behavior of nodes and labels using 'nodeCanvasObject'\n    // and 'nodePointerAreaPaint' functions.\n    _jsxDEV(ForceGraph2D, {\n      graphData: props === null || props === void 0 ? void 0 : props.data // Set the graph data from the 'props' object.\n      ,\n      nodeAutoColorBy: \"group\" // Automatically color nodes based on their 'group' property.\n      ,\n      nodeCanvasObject: (node, ctx, globalScale) => {\n        // Function to customize the appearance of individual nodes.\n        const label = node.name || node.id; // Get the node label or ID.\n        const fontSize = 16 / globalScale; // Calculate the font size based on the global scale.\n        ctx.font = `${fontSize}px Sans-Serif`; // Set the font size and family.\n\n        // Calculate the dimensions of the background rectangle for the label.\n        const textWidth = ctx.measureText(label).width;\n        const bckgDimensions = [textWidth, fontSize].map(n => n + fontSize * 0.2); // Add some padding to the dimensions.\n\n        // Fill the background rectangle with a semi-transparent white color.\n        ctx.fillStyle = \"rgba(255, 255, 255, 0.8)\";\n        ctx.fillRect(node.x - bckgDimensions[0] / 2, node.y - bckgDimensions[1] / 2, ...bckgDimensions);\n\n        // Set text alignment and color, then render the label in the center of the node.\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        ctx.fillStyle = node.color; // Use the node's color for the label.\n        ctx.fillText(label, node.x, node.y);\n\n        // Store the background dimensions for potential reuse.\n        node.__bckgDimensions = bckgDimensions;\n      },\n      nodePointerAreaPaint: (node, color, ctx) => {\n        // Function to customize the appearance of the node's pointer area.\n        ctx.fillStyle = color; // Set the provided color.\n        const bckgDimensions = node.__bckgDimensions;\n\n        // Fill the pointer area with the specified color if dimensions are available.\n        bckgDimensions && ctx.fillRect(node.x - bckgDimensions[0] / 2, node.y - bckgDimensions[1] / 2, ...bckgDimensions);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n// Export the 'ForceGraph' component as the default export.\n_c = ForceGraph;\nexport default ForceGraph;\nvar _c;\n$RefreshReg$(_c, \"ForceGraph\");","map":{"version":3,"names":["ForceGraph2D","jsxDEV","_jsxDEV","ForceGraph","props","graphData","data","nodeAutoColorBy","nodeCanvasObject","node","ctx","globalScale","label","name","id","fontSize","font","textWidth","measureText","width","bckgDimensions","map","n","fillStyle","fillRect","x","y","textAlign","textBaseline","color","fillText","__bckgDimensions","nodePointerAreaPaint","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/sunilbista/Personal/Capstone_project/frontend/src/components/ForceGraph/ForceGraph.js"],"sourcesContent":["// This component, 'ForceGraph', is a React component that utilizes the 'react-force-graph-2d'\n// library to render a 2D force-directed graph visualization. It takes graph data as a prop\n// and customizes the appearance of nodes and their labels.\n\n// Import the 'react-force-graph-2d' library.\nimport ForceGraph2D from \"react-force-graph-2d\";\n\n// Define the 'ForceGraph' functional component.\nconst ForceGraph = (props) => {\n  return (\n    // Render a 'ForceGraph2D' component, passing in the provided 'props.data' as the graph data.\n    // Customize the appearance and behavior of nodes and labels using 'nodeCanvasObject'\n    // and 'nodePointerAreaPaint' functions.\n    <ForceGraph2D\n      graphData={props?.data} // Set the graph data from the 'props' object.\n      nodeAutoColorBy=\"group\" // Automatically color nodes based on their 'group' property.\n      nodeCanvasObject={(node, ctx, globalScale) => {\n        // Function to customize the appearance of individual nodes.\n        const label = node.name || node.id; // Get the node label or ID.\n        const fontSize = 16 / globalScale; // Calculate the font size based on the global scale.\n        ctx.font = `${fontSize}px Sans-Serif`; // Set the font size and family.\n\n        // Calculate the dimensions of the background rectangle for the label.\n        const textWidth = ctx.measureText(label).width;\n        const bckgDimensions = [textWidth, fontSize].map(\n          (n) => n + fontSize * 0.2\n        ); // Add some padding to the dimensions.\n\n        // Fill the background rectangle with a semi-transparent white color.\n        ctx.fillStyle = \"rgba(255, 255, 255, 0.8)\";\n        ctx.fillRect(\n          node.x - bckgDimensions[0] / 2,\n          node.y - bckgDimensions[1] / 2,\n          ...bckgDimensions\n        );\n\n        // Set text alignment and color, then render the label in the center of the node.\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"middle\";\n        ctx.fillStyle = node.color; // Use the node's color for the label.\n        ctx.fillText(label, node.x, node.y);\n\n        // Store the background dimensions for potential reuse.\n        node.__bckgDimensions = bckgDimensions;\n      }}\n      nodePointerAreaPaint={(node, color, ctx) => {\n        // Function to customize the appearance of the node's pointer area.\n        ctx.fillStyle = color; // Set the provided color.\n        const bckgDimensions = node.__bckgDimensions;\n\n        // Fill the pointer area with the specified color if dimensions are available.\n        bckgDimensions &&\n          ctx.fillRect(\n            node.x - bckgDimensions[0] / 2,\n            node.y - bckgDimensions[1] / 2,\n            ...bckgDimensions\n          );\n      }}\n    />\n  );\n};\n\n// Export the 'ForceGraph' component as the default export.\nexport default ForceGraph;\n"],"mappings":";AAAA;AACA;AACA;;AAEA;AACA,OAAOA,YAAY,MAAM,sBAAsB;;AAE/C;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,UAAU,GAAIC,KAAK,IAAK;EAC5B;IAAA;IACE;IACA;IACA;IACAF,OAAA,CAACF,YAAY;MACXK,SAAS,EAAED,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEE,IAAK,CAAC;MAAA;MACxBC,eAAe,EAAC,OAAO,CAAC;MAAA;MACxBC,gBAAgB,EAAEA,CAACC,IAAI,EAAEC,GAAG,EAAEC,WAAW,KAAK;QAC5C;QACA,MAAMC,KAAK,GAAGH,IAAI,CAACI,IAAI,IAAIJ,IAAI,CAACK,EAAE,CAAC,CAAC;QACpC,MAAMC,QAAQ,GAAG,EAAE,GAAGJ,WAAW,CAAC,CAAC;QACnCD,GAAG,CAACM,IAAI,GAAI,GAAED,QAAS,eAAc,CAAC,CAAC;;QAEvC;QACA,MAAME,SAAS,GAAGP,GAAG,CAACQ,WAAW,CAACN,KAAK,CAAC,CAACO,KAAK;QAC9C,MAAMC,cAAc,GAAG,CAACH,SAAS,EAAEF,QAAQ,CAAC,CAACM,GAAG,CAC7CC,CAAC,IAAKA,CAAC,GAAGP,QAAQ,GAAG,GACxB,CAAC,CAAC,CAAC;;QAEH;QACAL,GAAG,CAACa,SAAS,GAAG,0BAA0B;QAC1Cb,GAAG,CAACc,QAAQ,CACVf,IAAI,CAACgB,CAAC,GAAGL,cAAc,CAAC,CAAC,CAAC,GAAG,CAAC,EAC9BX,IAAI,CAACiB,CAAC,GAAGN,cAAc,CAAC,CAAC,CAAC,GAAG,CAAC,EAC9B,GAAGA,cACL,CAAC;;QAED;QACAV,GAAG,CAACiB,SAAS,GAAG,QAAQ;QACxBjB,GAAG,CAACkB,YAAY,GAAG,QAAQ;QAC3BlB,GAAG,CAACa,SAAS,GAAGd,IAAI,CAACoB,KAAK,CAAC,CAAC;QAC5BnB,GAAG,CAACoB,QAAQ,CAAClB,KAAK,EAAEH,IAAI,CAACgB,CAAC,EAAEhB,IAAI,CAACiB,CAAC,CAAC;;QAEnC;QACAjB,IAAI,CAACsB,gBAAgB,GAAGX,cAAc;MACxC,CAAE;MACFY,oBAAoB,EAAEA,CAACvB,IAAI,EAAEoB,KAAK,EAAEnB,GAAG,KAAK;QAC1C;QACAA,GAAG,CAACa,SAAS,GAAGM,KAAK,CAAC,CAAC;QACvB,MAAMT,cAAc,GAAGX,IAAI,CAACsB,gBAAgB;;QAE5C;QACAX,cAAc,IACZV,GAAG,CAACc,QAAQ,CACVf,IAAI,CAACgB,CAAC,GAAGL,cAAc,CAAC,CAAC,CAAC,GAAG,CAAC,EAC9BX,IAAI,CAACiB,CAAC,GAAGN,cAAc,CAAC,CAAC,CAAC,GAAG,CAAC,EAC9B,GAAGA,cACL,CAAC;MACL;IAAE;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;AAEN,CAAC;;AAED;AAAAC,EAAA,GAtDMlC,UAAU;AAuDhB,eAAeA,UAAU;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}